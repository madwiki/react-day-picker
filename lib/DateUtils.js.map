{"version":3,"sources":["../src/DateUtils.js"],"names":["addMonths","clone","isSameDay","isPastDay","isDayBetween","addDayToRange","isDayInRange","d","n","newDate","setMonth","getMonth","Date","getTime","d1","d2","getDate","getFullYear","today","setHours","day","range","from","to"],"mappings":"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","file":"DateUtils.js","sourcesContent":["/**\n * Return `d` as a new date with `n` months added.\n * @param {[type]} d\n * @param {[type]} n\n */\nexport function addMonths(d, n) {\n  const newDate = clone(d);\n  newDate.setMonth(d.getMonth() + n);\n  return newDate;\n}\n\n/**\n * Clone a date object.\n *\n * @param  {Date} d The date to clone\n * @return {Date} The cloned date\n */\nexport function clone(d) {\n  return new Date(d.getTime());\n}\n\n/**\n * Return `true` if two dates are the same day, ignoring the time.\n *\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nexport function isSameDay(d1, d2) {\n  if (!d1 || !d2) {\n    return false;\n  }\n  return d1.getDate() === d2.getDate() &&\n    d1.getMonth() === d2.getMonth() &&\n    d1.getFullYear() === d2.getFullYear();\n}\n\n/**\n * Return `true` if a day is in the past, e.g. yesterday or any day\n * before yesterday.\n *\n * @param  {Date}  d\n * @return {Boolean}\n */\nexport function isPastDay(d) {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return d < today;\n}\n\n/**\n * Return `true` if day `d` is between days `d1` and `d2`,\n * without including them.\n *\n * @param  {Date}  d\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nexport function isDayBetween(d, d1, d2) {\n  d = clone(d);\n  d1 = clone(d1);\n  d2 = clone(d2);\n\n  d.setHours(0, 0, 0, 0);\n  d1.setHours(0, 0, 0, 0);\n  d2.setHours(0, 0, 0, 0);\n  return (d1 < d && d < d2) || (d2 < d && d < d1);\n}\n\n/**\n * Add a day to a range and return a new range. A range is an object with\n * `from` and `to` days.\n *\n * @param {Date} day\n * @param {Object} range\n * @return {Object} Returns a new range object\n */\nexport function addDayToRange(day, range={from: null, to: null}) {\n  let { from, to } = range;\n  if (!from) {\n    from = day;\n  }\n  else if (from && to && isSameDay(from, to) && isSameDay(day, from)) {\n    from = null;\n    to = null;\n  }\n  else if (to && day < from) {\n    from = day;\n  }\n  else if (to && isSameDay(day, to)) {\n    from = day;\n    to = day;\n  }\n  else {\n    to = day;\n    if (to < from) {\n      to = from;\n      from = day;\n    }\n  }\n\n  return { from, to };\n}\n\n/**\n * Return `true` if a day is included in a range of days.\n *\n * @param  {Date}  day\n * @param  {Object}  range\n * @return {Boolean}\n */\nexport function isDayInRange(day, range) {\n  const { from, to } = range;\n  return (from && isSameDay(day, from)) ||\n    (to && isSameDay(day, to)) ||\n    (from && to && isDayBetween(day, from, to));\n}\n\nexport default {\n  addDayToRange,\n  addMonths,\n  clone,\n  isSameDay,\n  isDayInRange,\n  isDayBetween,\n  isPastDay\n}\n"]}